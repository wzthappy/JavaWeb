<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace: 名称空间 -->
<mapper namespace="com.itheima.mapper.BrandMapper">

  <!--
    数据库表的字段名称 和 实体类的属性名称 不一样，则不能自动封装数据
      * 起别名: 对不一样的列名，让别名和实体的属性名一样
              缺点: 每次查询都要定义一次别名
      * sql片段   缺点: 不灵活
      * resultMap:
            1. 定义<resultMap>标签
            2. 在<select>标签中所用resultMap属性替换 resultMap属性
   -->

  <!--
    sql片段
 -->
  <!--  <sql id="brand_column">-->
  <!--    id, brand_name brandName, company_name companyName, ordered, description, status-->
  <!--  </sql>-->

  <!--    <select id="selectAll" resultType="brand">-->
  <!--      select <include refid="brand_column"></include>-->
  <!--      from tb_brand;-->
  <!--    </select>-->

  <!--  <select id="selectAll" resultType="brand">-->
  <!--    select * from tb_brand;-->
  <!--  </select>-->

  <!--
    id: 唯一标识
    type: 映射的类型，支持别名
   -->
  <resultMap id="brandResultMap" type="brand">
    <!--
      id: 完成主键字段的映射
          column: 表的列名
          property: 实体类的属性名
      result: 完成一般字段的映射
     -->
    <result column="brand_name" property="brandName"/>
    <result column="company_name" property="companyName"/>
  </resultMap>

  <select id="selectAll" resultMap="brandResultMap">
    select *
    from tb_brand;
  </select>

  <!--
    * 参数占位符:
        1. #{}: 会将其替换为 ?. 为了防止SQL注入
        2. ${}: 拼sql. 会存在SQl注入问题
        3. 所用时机:
            * 参数传递的时候用#{}
            * 表名或者列名不固定的情况下: ${}  会存在sql注入问题
        * 参数类型: parameterType: 可以省略
        * 特殊字符处理:
            1. 转义字符:
            2. CDATA区:
                  <![CDATA[
                       特殊字符，如大小写
                   ]]>
   -->
  <!--  <select id="selectById" resultMap="brandResultMap">-->
  <!--    select *-->
  <!--    from tb_brand where id-->
  <!--         <![CDATA[-->
  <!--         <-->
  <!--         ]]>-->
  <!--     ${id}   &lt;!&ndash; 和接口方法参数一致 &ndash;&gt;-->
  <!--  </select>-->
  <select id="selectById" resultMap="brandResultMap">
    select *
    from tb_brand where id = ${id}   <!-- 和接口方法参数一致 -->
  </select>

  <!-- 条件查询 -->
  <!--  <select id="selectByCondition" resultMap="brandResultMap">-->
  <!--    select *-->
  <!--    from tb_brand-->
  <!--    where -->
  <!--        status = #{status}-->
  <!--        and company_name like #{companyName}-->
  <!--        and brand_name like #{brandName}-->
  <!--  </select>-->
  <!-- 动态条件查询 -->
  <select id="selectByCondition" resultMap="brandResultMap">
    select *
    from tb_brand
    <!-- where 1 = 1 -->
    <where>   <!-- 替换where关键字，如果只有一个条件就会自动去掉and，第一个符合条件的也会去掉and -->
      <if test="status != null">  <!-- test中是条件 -->
        and status = #{status}
      </if>
      <if test="companyName != null and companyName != ''">
        and company_name like #{companyName}
      </if>
      <if test="brandName != null and brandName != ''">
        and brand_name like #{brandName}
      </if>
    </where>
  </select>

  <!--  单条件动态查询-->

  <!--  <select id="selectByConditonString" resultMap="brandResultMap">-->
  <!--    select *-->
  <!--    from tb_brand-->
  <!--    where-->
  <!--    <choose>  &lt;!&ndash; 相当于switch &ndash;&gt;-->
  <!--      <when test="status != null">  &lt;!&ndash; 相当于case &ndash;&gt;-->
  <!--        status = #{status}-->
  <!--      </when>-->
  <!--      <when test="companyName != null">  &lt;!&ndash; 相当于case &ndash;&gt;-->
  <!--        company_name like #{companyName}-->
  <!--      </when>-->
  <!--      <when test="brandName != null">  &lt;!&ndash; 相当于case &ndash;&gt;-->
  <!--        brand_name like #{brandName}-->
  <!--      </when>-->
  <!--      <otherwise>-->
  <!--        1 = 1-->
  <!--      </otherwise>-->
  <!--    </choose>-->
  <!--  </select>-->
  <select id="selectByConditonString" resultMap="brandResultMap">
    select *
    from tb_brand
    <where>    <!-- 如果后面没有条件，他会自动去掉where -->
      <choose>  <!-- 相当于switch -->
        <when test="status != null">  <!-- 相当于case -->
          status = #{status}
        </when>
        <when test="companyName != null">  <!-- 相当于case -->
          company_name like #{companyName}
        </when>
        <when test="brandName != null">  <!-- 相当于case -->
          brand_name like #{brandName}
        </when>
      </choose>
    </where>
  </select>

  <!-- 添加 -->
  <!-- 如果对应类实现这个对应的接口，还要获取对应的id(这个id是没有添加的。他是自增的)，
        加上useGeneratedKeys="true" keyProperty="名" 就可以在对应类中用.get名方法获取 -->
  <insert id="add" useGeneratedKeys="true" keyProperty="id">
    insert into tb_brand (brand_name, company_name, ordered, description, status)
    values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
  </insert>

  <!-- 修改-->
  <!--  <update id="update">-->
  <!--    update tb_brand-->
  <!--    set-->
  <!--      brand_name = #{brandName},-->
  <!--      company_name = #{companyName},-->
  <!--      ordered = #{ordered},-->
  <!--      description = #{description},-->
  <!--      status = #{status}-->
  <!--    where id = #{id}-->
  <!--  </update>-->

  <!-- 动态修改字段 -->
  <update id="update">
    update tb_brand
    <set>   <!-- 和set一样，但功能比sel关键字强大 -->
      <if test="brandName !=null and brandName != ''">
        brand_name = #{brandName},
      </if>
      <if test="companyName !=null and companyName != ''">
        company_name = #{companyName},
      </if>
      <if test="ordered !=null">
        ordered = #{ordered},
      </if>
      <if test="description !=null and description != ''">
        description = #{description},
      </if>
      <if test="status !=null">
        status = #{status}
      </if>
    </set>
    where id = #{id}
  </update>

  <!-- 根据id删除 -->
  <delete id="deleteById">
    delete from tb_brand where id = #{id};
  </delete>

  <!--
       mybatis会将数组参数，封装为一个Map集合。
          * 默认: array = 数组
          * 使用: 使用@Param注解改变map集合的默认key的名称
   -->
  <!-- 批量删除 -->
  <delete id="deleteByIds">
    delete from tb_brand
           where
               id in
                   <foreach collection="ids" item="id" separator="," open="(" close=")">
                        <!-- collection="ids" 遍历ids 这个数组 ， item="id" 里面的值为id-->
                        <!-- open="(" 开始时加上，close=")" 结束时加上  -->
                     #{id}
                   </foreach>
#                );
  </delete>

</mapper>